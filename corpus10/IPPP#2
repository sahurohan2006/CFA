PR.IP-1: A baseline configuration of information technology/industrial control systems is created and maintained incorporating security principles (e.g. concept of least functionality)
BASELINE CONFIGURATION
Control:
a. Develop, document, and maintain under configuration control, a current baseline
configuration of the system; and
b. Review and update the baseline configuration of the system:
1. [Assignment: organization-defined frequency];
2. When required due to [Assignment: organization-defined circumstances]; and
3. When system components are installed or upgraded.
Discussion: Baseline configurations for systems and system components include connectivity,
operational, and communications aspects of systems. Baseline configurations are documented,
formally reviewed, and agreed-upon specifications for systems or configuration items within
those systems. Baseline configurations serve as a basis for future builds, releases, or changes to
systems and include security and privacy control implementations, operational procedures,
information about system components, network topology, and logical placement of components
in the system architecture. Maintaining baseline configurations requires creating new baselines
as organizational systems change over time. Baseline configurations of systems reflect the
current enterprise architecture
BASELINE CONFIGURATION | AUTOMATION SUPPORT FOR ACCURACY AND CURRENCY
Maintain the currency, completeness, accuracy, and availability of the baseline
configuration of the system using [Assignment: organization-defined automated
mechanisms].
Discussion: Automated mechanisms that help organizations maintain consistent baseline
configurations for systems include configuration management tools, hardware, software,
firmware inventory tools, and network management tools. Automated tools can be used at
the organization level, mission and business process level, or system level on workstations,
servers, notebook computers, network components, or mobile devices. Tools can be used to
track version numbers on operating systems, applications, types of software installed, and
current patch levels. Automation support for accuracy and currency can be satisfied by the
implementation of CM-8(2) for organizations that combine system component inventory and
baseline configuration activities.
BASELINE CONFIGURATION | RETENTION OF PREVIOUS CONFIGURATIONS
Retain [Assignment: organization-defined number] of previous versions of baseline
configurations of the system to support rollback.
Discussion: Retaining previous versions of baseline configurations to support rollback
include hardware, software, firmware, configuration files, configuration records, and
associated documentation.
BASELINE CONFIGURATION | DEVELOPMENT AND TEST ENVIRONMENTS
Maintain a baseline configuration for system development and test environments that is
managed separately from the operational baseline configuration.
Discussion: Establishing separate baseline configurations for development, testing, and
operational environments protects systems from unplanned or unexpected events related to
development and testing activities. Separate baseline configurations allow organizations to
apply the configuration management that is most appropriate for each type of configuration.
For example, the management of operational configurations typically emphasizes the need
for stability, while the management of development or test configurations requires greater
flexibility. Configurations in the test environment mirror configurations in the operational
environment to the extent practicable so that the results of the testing are representative of
the proposed changes to the operational systems. Separate baseline configurations do not
necessarily require separate physical environments.
BASELINE CONFIGURATION | CONFIGURE SYSTEMS AND COMPONENTS FOR HIGH-RISK AREAS
(a) Issue [Assignment: organization-defined systems or system components] with
[Assignment: organization-defined configurations] to individuals traveling to locations
that the organization deems to be of significant risk; and
(b) Apply the following controls to the systems or components when the individuals
return from travel: [Assignment: organization-defined controls].
Discussion: When it is known that systems or system components will be in high-risk areas
external to the organization, additional controls may be implemented to counter the
increased threat in such areas. For example, organizations can take actions for notebook
computers used by individuals departing on and returning from travel. Actions include
determining the locations that are of concern, defining the required configurations for the
components, ensuring that components are configured as intended before travel is initiated,
and applying controls to the components after travel is completed. Specially configured
notebook computers include computers with sanitized hard drives, limited applications, and
more stringent configuration settings. Controls applied to mobile devices upon return from
travel include examining the mobile device for signs of physical tampering and purging and
reimaging disk drives. Protecting information that resides on mobile devices is addressed in
the MP (Media Protection) family.
CONFIGURATION CHANGE CONTROL
Control:
a. Determine and document the types of changes to the system that are configurationcontrolled;
b. Review proposed configuration-controlled changes to the system and approve or disapprove
such changes with explicit consideration for security and privacy impact analyses;
c. Document configuration change decisions associated with the system;
d. Implement approved configuration-controlled changes to the system;
Retain records of configuration-controlled changes to the system for [Assignment:
organization-defined time period];
f. Monitor and review activities associated with configuration-controlled changes to the
system; and
g. Coordinate and provide oversight for configuration change control activities through
[Assignment: organization-defined configuration change control element] that convenes
[Selection (one or more): [Assignment: organization-defined frequency]; when [Assignment:
organization-defined configuration change conditions]].
Discussion: Configuration change control for organizational systems involves the systematic
proposal, justification, implementation, testing, review, and disposition of system changes,
including system upgrades and modifications. Configuration change control includes changes to
baseline configurations, configuration items of systems, operational procedures, configuration
settings for system components, remediate vulnerabilities, and unscheduled or unauthorized
changes. Processes for managing configuration changes to systems include Configuration Control
Boards or Change Advisory Boards that review and approve proposed changes. For changes that
impact privacy risk, the senior agency official for privacy updates privacy impact assessments and
system of records notices. For new systems or major upgrades, organizations consider including
representatives from the development organizations on the Configuration Control Boards or
Change Advisory Boards. Auditing of changes includes activities before and after changes are
made to systems and the auditing activities required to implement such changes. See also SA-10
CONFIGURATION CHANGE CONTROL | AUTOMATED DOCUMENTATION, NOTIFICATION, AND
PROHIBITION OF CHANGES
Use [Assignment: organization-defined automated mechanisms] to:
(a) Document proposed changes to the system;
(b) Notify [Assignment: organization-defined approval authorities] of proposed changes
to the system and request change approval;
(c) Highlight proposed changes to the system that have not been approved or
disapproved within [Assignment: organization-defined time period];
(d) Prohibit changes to the system until designated approvals are received;
(e) Document all changes to the system; and
(f) Notify [Assignment: organization-defined personnel] when approved changes to the
system are completed.
CONFIGURATION CHANGE CONTROL | TESTING, VALIDATION, AND DOCUMENTATION OF CHANGES
Test, validate, and document changes to the system before finalizing the implementation
of the changes.
Discussion: Changes to systems include modifications to hardware, software, or firmware
components and configuration settings defined in CM-6. Organizations ensure that testing
does not interfere with system operations that support organizational mission and business
functions. Individuals or groups conducting tests understand security and privacy policies
and procedures, system security and privacy policies and procedures, and the health, safety,
and environmental risks associated with specific facilities or processes. Operational systems
may need to be taken offline, or replicated to the extent feasible, before testing can be
conducted. If systems must be taken offline for testing, the tests are scheduled to occur
during planned system outages whenever possible. If the testing cannot be conducted on
operational systems, organizations employ compensating controls.
CONFIGURATION CHANGE CONTROL | AUTOMATED CHANGE IMPLEMENTATION
Implement changes to the current system baseline and deploy the updated baseline across
the installed base using [Assignment: organization-defined automated mechanisms].
Discussion: Automated tools can improve the accuracy, consistency, and availability of
configuration baseline information. Automation can also provide data aggregation and data
correlation capabilities, alerting mechanisms, and dashboards to support risk-based
decision-making within the organization.
CONFIGURATION CHANGE CONTROL | SECURITY AND PRIVACY REPRESENTATIVES
Require [Assignment: organization-defined security and privacy representatives] to be
members of the [Assignment: organization-defined configuration change control element].
Discussion: Information security and privacy representatives include system security
officers, senior agency information security officers, senior agency officials for privacy, or
system privacy officers. Representation by personnel with information security and privacy
expertise is important because changes to system configurations can have unintended side
effects, some of which may be security- or privacy-relevant. Detecting such changes early in
the process can help avoid unintended, negative consequences that could ultimately affect
the security and privacy posture of systems. The configuration change control element
referred to in the second organization-defined parameter reflects the change control
elements defined by organizations in CM-3g
CONFIGURATION CHANGE CONTROL | AUTOMATED SECURITY RESPONSE
Implement the following security responses automatically if baseline configurations are
changed in an unauthorized manner: [Assignment: organization-defined security
responses].
Discussion: Automated security responses include halting selected system functions, halting
system processing, and issuing alerts or notifications to organizational personnel when there
is an unauthorized modification of a configuration item.
CONFIGURATION CHANGE CONTROL | CRYPTOGRAPHY MANAGEMENT
Ensure that cryptographic mechanisms used to provide the following controls are under
configuration management: [Assignment: organization-defined controls].
Discussion: The controls referenced in the control enhancement refer to security and
privacy controls from the control catalog. Regardless of the cryptographic mechanisms
employed, processes and procedures are in place to manage those mechanisms. For
example, if system components use certificates for identification and authentication, a
process is implemented to address the expiration of those certificates.
CONFIGURATION CHANGE CONTROL | REVIEW SYSTEM CHANGES
Review changes to the system [Assignment: organization-defined frequency] or when
[Assignment: organization-defined circumstances] to determine whether unauthorized
changes have occurred.
Discussion: Indications that warrant a review of changes to the system and the specific
circumstances justifying such reviews may be obtained from activities carried out by
organizations during the configuration change process or continuous monitoring process
CONFIGURATION CHANGE CONTROL | PREVENT OR RESTRICT CONFIGURATION CHANGES
Prevent or restrict changes to the configuration of the system under the following
circumstances: [Assignment: organization-defined circumstances].
Discussion: System configuration changes can adversely affect critical system security and
privacy functionality. Change restrictions can be enforced through automated mechanisms.
IMPACT ANALYSES
Control: Analyze changes to the system to determine potential security and privacy impacts
prior to change implementation.
Discussion: Organizational personnel with security or privacy responsibilities conduct impact
analyses. Individuals conducting impact analyses possess the necessary skills and technical
expertise to analyze the changes to systems as well as the security or privacy ramifications.
Impact analyses include reviewing security and privacy plans, policies, and procedures to
understand control requirements; reviewing system design documentation and operational
procedures to understand control implementation and how specific system changes might affect
the controls; reviewing the impact of changes on organizational supply chain partners with
stakeholders; and determining how potential changes to a system create new risks to the privacy
of individuals and the ability of implemented controls to mitigate those risks. Impact analyses
also include risk assessments to understand the impact of the changes and determine if
additional controls are required
IMPACT ANALYSES | SEPARATE TEST ENVIRONMENTS
Analyze changes to the system in a separate test environment before implementation in
an operational environment, looking for security and privacy impacts due to flaws,
weaknesses, incompatibility, or intentional malice.
Discussion: A separate test environment requires an environment that is physically or
logically separate and distinct from the operational environment. The separation is sufficient
to ensure that activities in the test environment do not impact activities in the operational
environment and that information in the operational environment is not inadvertently
transmitted to the test environment. Separate environments can be achieved by physical or
logical means. If physically separate test environments are not implemented, organizations
determine the strength of mechanism required when implementing logical separation.
IMPACT ANALYSES | VERIFICATION OF CONTROLS
After system changes, verify that the impacted controls are implemented correctly,
operating as intended, and producing the desired outcome with regard to meeting the
security and privacy requirements for the system.
Discussion: Implementation in this context refers to installing changed code in the
operational system that may have an impact on security or privacy controls.
ACCESS RESTRICTIONS FOR CHANGE
Control: Define, document, approve, and enforce physical and logical access restrictions
associated with changes to the system.
Discussion: Changes to the hardware, software, or firmware components of systems or the
operational procedures related to the system can potentially have significant effects on the
security of the systems or individuals’ privacy. Therefore, organizations permit only qualified and
authorized individuals to access systems for purposes of initiating changes. Access restrictions
include physical and logical access controls (see AC-3 and PE-3), software libraries, workflow
automation, media libraries, abstract layers (i.e., changes implemented into external interfaces
rather than directly into systems), and change windows (i.e., changes occur only during specified
times).
ACCESS RESTRICTIONS FOR CHANGE | AUTOMATED ACCESS ENFORCEMENT AND AUDIT RECORDS
(a) Enforce access restrictions using [Assignment: organization-defined automated
mechanisms]; and
(b) Automatically generate audit records of the enforcement actions.
Discussion: Organizations log system accesses associated with applying configuration
changes to ensure that configuration change control is implemented and to support afterthe-fact actions should organizations discover any unauthorized changes.
ACCESS RESTRICTIONS FOR CHANGE | DUAL AUTHORIZATION
Enforce dual authorization for implementing changes to [Assignment: organizationdefined system components and system-level information].
Discussion: Organizations employ dual authorization to help ensure that any changes to
selected system components and information cannot occur unless two qualified individuals
approve and implement such changes. The two individuals possess the skills and expertise to
determine if the proposed changes are correct implementations of approved changes. The
individuals are also accountable for the changes. Dual authorization may also be known as
two-person control. To reduce the risk of collusion, organizations consider rotating dual
authorization duties to other individuals. System-level information includes operational
procedures
ACCESS RESTRICTIONS FOR CHANGE | PRIVILEGE LIMITATION FOR PRODUCTION AND OPERATION
(a) Limit privileges to change system components and system-related information within
a production or operational environment; and
(b) Review and reevaluate privileges [Assignment: organization-defined frequency].
Discussion: In many organizations, systems support multiple mission and business functions.
Limiting privileges to change system components with respect to operational systems is
necessary because changes to a system component may have far-reaching effects on mission
and business processes supported by the system. The relationships between systems and
mission/business processes are, in some cases, unknown to developers. System-related
information includes operational procedures
ACCESS RESTRICTIONS FOR CHANGE | LIMIT LIBRARY PRIVILEGES
Limit privileges to change software resident within software libraries.
Discussion: Software libraries include privileged programs.
CONFIGURATION SETTINGS
Control:
a. Establish and document configuration settings for components employed within the system
that reflect the most restrictive mode consistent with operational requirements using
[Assignment: organization-defined common secure configurations];
b. Implement the configuration settings;
c. Identify, document, and approve any deviations from established configuration settings for
[Assignment: organization-defined system components] based on [Assignment: organizationdefined operational requirements]; and
d. Monitor and control changes to the configuration settings in accordance with organizational
policies and procedures.
Discussion: Configuration settings are the parameters that can be changed in the hardware,
software, or firmware components of the system that affect the security and privacy posture or
functionality of the system. Information technology products for which configuration settings can
be defined include mainframe computers, servers, workstations, operating systems, mobile
devices, input/output devices, protocols, and applications. Parameters that impact the security
posture of systems include registry settings; account, file, or directory permission settings; and
settings for functions, protocols, ports, services, and remote connections. Privacy parameters are
parameters impacting the privacy posture of systems, including the parameters required to
satisfy other privacy controls. Privacy parameters include settings for access controls, data
processing preferences, and processing and retention permissions. Organizations establish
organization-wide configuration settings and subsequently derive specific configuration settings
for systems. The established settings become part of the configuration baseline for the system.
Common secure configurations (also known as security configuration checklists, lockdown and
hardening guides, and security reference guides) provide recognized, standardized, and
established benchmarks that stipulate secure configuration settings for information technology
products and platforms as well as instructions for configuring those products or platforms to
meet operational requirements. Common secure configurations can be developed by a variety of
organizations, including information technology product developers, manufacturers, vendors,
federal agencies, consortia, academia, industry, and other organizations in the public and private
sectors.
Implementation of a common secure configuration may be mandated at the organization level,
mission and business process level, system level, or at a higher level, including by a regulatory
agency. Common secure configurations include the United States Government Configuration
Baseline [USGCB] and security technical implementation guides (STIGs), which affect the
implementation of CM-6 and other controls such as AC-19 and CM-7. The Security Content
Automation Protocol (SCAP) and the defined standards within the protocol provide an effective
method to uniquely identify, track, and control configuration settings.
CONFIGURATION SETTINGS | AUTOMATED MANAGEMENT, APPLICATION, AND VERIFICATION
Manage, apply, and verify configuration settings for [Assignment: organization-defined
system components] using [Assignment: organization-defined automated mechanisms].
Discussion: Automated tools (e.g., hardening tools, baseline configuration tools) can
improve the accuracy, consistency, and availability of configuration settings information.
Automation can also provide data aggregation and data correlation capabilities, alerting
mechanisms, and dashboards to support risk-based decision-making within the organization.
CONFIGURATION SETTINGS | RESPOND TO UNAUTHORIZED CHANGES
Take the following actions in response to unauthorized changes to [Assignment:
organization-defined configuration settings]: [Assignment: organization-defined actions].
Discussion: Responses to unauthorized changes to configuration settings include alerting
designated organizational personnel, restoring established configuration settings, or—in
extreme cases—halting affected system processing.
LEAST FUNCTIONALITY
Control:
a. Configure the system to provide only [Assignment: organization-defined mission essential
capabilities]; and
b. Prohibit or restrict the use of the following functions, ports, protocols, software, and/or
services: [Assignment: organization-defined prohibited or restricted functions, system ports,
protocols, software, and/or services].
Discussion: Systems provide a wide variety of functions and services. Some of the functions and
services routinely provided by default may not be necessary to support essential organizational
missions, functions, or operations. Additionally, it is sometimes convenient to provide multiple
services from a single system component, but doing so increases risk over limiting the services
provided by that single component. Where feasible, organizations limit component functionality
to a single function per component. Organizations consider removing unused or unnecessary
software and disabling unused or unnecessary physical and logical ports and protocols to prevent
unauthorized connection of components, transfer of information, and tunneling. Organizations
employ network scanning tools, intrusion detection and prevention systems, and end-point
protection technologies, such as firewalls and host-based intrusion detection systems, to identify
and prevent the use of prohibited functions, protocols, ports, and services. Least functionality
can also be achieved as part of the fundamental design and development of the system (see SA8, SC-2, and SC-3).
LEAST FUNCTIONALITY | PERIODIC REVIEW
(a) Review the system [Assignment: organization-defined frequency] to identify
unnecessary and/or nonsecure functions, ports, protocols, software, and services; and
(b) Disable or remove [Assignment: organization-defined functions, ports, protocols,
software, and services within the system deemed to be unnecessary and/or
nonsecure].
Discussion: Organizations review functions, ports, protocols, and services provided by
systems or system components to determine the functions and services that are candidates
for elimination. Such reviews are especially important during transition periods from older
technologies to newer technologies (e.g., transition from IPv4 to IPv6). These technology
transitions may require implementing the older and newer technologies simultaneously
during the transition period and returning to minimum essential functions, ports, protocols,
and services at the earliest opportunity. Organizations can either decide the relative security
of the function, port, protocol, and/or service or base the security decision on the
assessment of other entities. Unsecure protocols include Bluetooth, FTP, and peer-to-peer
networking
LEAST FUNCTIONALITY | PREVENT PROGRAM EXECUTION
Prevent program execution in accordance with [Selection (one or more): [Assignment:
organization-defined policies, rules of behavior, and/or access agreements regarding
software program usage and restrictions]; rules authorizing the terms and conditions of
software program usage].
Discussion: Prevention of program execution addresses organizational policies, rules of
behavior, and/or access agreements that restrict software usage and the terms and
conditions imposed by the developer or manufacturer, including software licensing and
copyrights. Restrictions include prohibiting auto-execute features, restricting roles allowed
to approve program execution, permitting or prohibiting specific software programs, or
restricting the number of program instances executed at the same time.
LEAST FUNCTIONALITY | REGISTRATION COMPLIANCE
Ensure compliance with [Assignment: organization-defined registration requirements for
functions, ports, protocols, and services].
Discussion: Organizations use the registration process to manage, track, and provide
oversight for systems and implemented functions, ports, protocols, and services.
LEAST FUNCTIONALITY | UNAUTHORIZED SOFTWARE — DENY-BY-EXCEPTION
(a) Identify [Assignment: organization-defined software programs not authorized to
execute on the system];
(b) Employ an allow-all, deny-by-exception policy to prohibit the execution of
unauthorized software programs on the system; and
(c) Review and update the list of unauthorized software programs [Assignment:
organization-defined frequency].
Discussion: Unauthorized software programs can be limited to specific versions or from a
specific source. The concept of prohibiting the execution of unauthorized software may also
be applied to user actions, system ports and protocols, IP addresses/ranges, websites, and
MAC addresses.
LEAST FUNCTIONALITY | AUTHORIZED SOFTWARE — ALLOW-BY-EXCEPTION
(a) Identify [Assignment: organization-defined software programs authorized to execute
on the system];
(b) Employ a deny-all, permit-by-exception policy to allow the execution of authorized
software programs on the system; and
(c) Review and update the list of authorized software programs [Assignment:
organization-defined frequency].
Discussion: Authorized software programs can be limited to specific versions or from a
specific source. To facilitate a comprehensive authorized software process and increase the
strength of protection for attacks that bypass application level authorized software, software
programs may be decomposed into and monitored at different levels of detail. These levels
include applications, application programming interfaces, application modules, scripts,
system processes, system services, kernel functions, registries, drivers, and dynamic link
libraries. The concept of permitting the execution of authorized software may also be
applied to user actions, system ports and protocols, IP addresses/ranges, websites, and MAC
addresses. Organizations consider verifying the integrity of authorized software programs
using digital signatures, cryptographic checksums, or hash functions. Verification of
authorized software can occur either prior to execution or at system startup. The
identification of authorized URLs for websites is addressed in CA-3(5) and SC-7.
LEAST FUNCTIONALITY | CONFINED ENVIRONMENTS WITH LIMITED PRIVILEGES
Require that the following user-installed software execute in a confined physical or virtual
machine environment with limited privileges: [Assignment: organization-defined userinstalled software].
Discussion: Organizations identify software that may be of concern regarding its origin or
potential for containing malicious code. For this type of software, user installations occur in
confined environments of operation to limit or contain damage from malicious code that
may be executed.
LEAST FUNCTIONALITY | CODE EXECUTION IN PROTECTED ENVIRONMENTS
Allow execution of binary or machine-executable code only in confined physical or virtual
machine environments and with the explicit approval of [Assignment: organizationdefined personnel or roles] when such code is:
(a) Obtained from sources with limited or no warranty; and/or
(b) Without the provision of source code.
Discussion: Code execution in protected environments applies to all sources of binary or
machine-executable code, including commercial software and firmware and open-source
software
LEAST FUNCTIONALITY | BINARY OR MACHINE EXECUTABLE CODE
(a) Prohibit the use of binary or machine-executable code from sources with limited or no
warranty or without the provision of source code; and
(b) Allow exceptions only for compelling mission or operational requirements and with
the approval of the authorizing official.
Discussion: Binary or machine executable code applies to all sources of binary or machineexecutable code, including commercial software and firmware and open-source software.
Organizations assess software products without accompanying source code or from sources
with limited or no warranty for potential security impacts. The assessments address the fact
that software products without the provision of source code may be difficult to review,
repair, or extend. In addition, there may be no owners to make such repairs on behalf of
organizations. If open-source software is used, the assessments address the fact that there is
no warranty, the open-source software could contain back doors or malware, and there may
be no support available.
LEAST FUNCTIONALITY | PROHIBITING THE USE OF UNAUTHORIZED HARDWARE
(a) Identify [Assignment: organization-defined hardware components authorized for
system use];
(b) Prohibit the use or connection of unauthorized hardware components;
(c) Review and update the list of authorized hardware components [Assignment:
organization-defined frequency].
Discussion: Hardware components provide the foundation for organizational systems and
the platform for the execution of authorized software programs. Managing the inventory of
hardware components and controlling which hardware components are permitted to be
installed or connected to organizational systems is essential in order to provide adequate
security
CONFIGURATION MANAGEMENT PLAN
Control: Develop, document, and implement a configuration management plan for the system
that:
a. Addresses roles, responsibilities, and configuration management processes and procedures;
b. Establishes a process for identifying configuration items throughout the system
development life cycle and for managing the configuration of the configuration items;
c. Defines the configuration items for the system and places the configuration items under
configuration management;
d. Is reviewed and approved by [Assignment: organization-defined personnel or roles]; and
e. Protects the configuration management plan from unauthorized disclosure and
modification.
Discussion: Configuration management activities occur throughout the system development life
cycle. As such, there are developmental configuration management activities (e.g., the control of
code and software libraries) and operational configuration management activities (e.g., control
of installed components and how the components are configured). Configuration management
plans satisfy the requirements in configuration management policies while being tailored to
individual systems. Configuration management plans define processes and procedures for how
configuration management is used to support system development life cycle activities.
Configuration management plans are generated during the development and acquisition stage of
the system development life cycle. The plans describe how to advance changes through change
management processes; update configuration settings and baselines; maintain component
inventories; control development, test, and operational environments; and develop, release, and
update key documents.
Organizations can employ templates to help ensure the consistent and timely development and
implementation of configuration management plans. Templates can represent a configuration
management plan for the organization with subsets of the plan implemented on a system by
system basis. Configuration management approval processes include the designation of key
stakeholders responsible for reviewing and approving proposed changes to systems, and
personnel who conduct security and privacy impact analyses prior to the implementation of
changes to the systems. Configuration items are the system components, such as the hardware,
software, firmware, and documentation to be configuration-managed. As systems continue
through the system development life cycle, new configuration items may be identified, and some
existing configuration items may no longer need to be under configuration control.
CONFIGURATION MANAGEMENT PLAN | ASSIGNMENT OF RESPONSIBILITY
Assign responsibility for developing the configuration management process to
organizational personnel that are not directly involved in system development.
Discussion: In the absence of dedicated configuration management teams assigned within
organizations, system developers may be tasked with developing configuration management
processes using personnel who are not directly involved in system development or system
integration. This separation of duties ensures that organizations establish and maintain a
sufficient degree of independence between the system development and integration
processes and configuration management processes to facilitate quality control and more
effective oversight
DEVELOPER CONFIGURATION MANAGEMENT
Control: Require the developer of the system, system component, or system service to:
a. Perform configuration management during system, component, or service [Selection (one or
more): design; development; implementation; operation; disposal];
b. Document, manage, and control the integrity of changes to [Assignment: organizationdefined configuration items under configuration management];
c. Implement only organization-approved changes to the system, component, or service;
Document approved changes to the system, component, or service and the potential
security and privacy impacts of such changes; and
e. Track security flaws and flaw resolution within the system, component, or service and report
findings to [Assignment: organization-defined personnel].
Discussion: Organizations consider the quality and completeness of configuration management
activities conducted by developers as direct evidence of applying effective security controls.
Controls include protecting the master copies of material used to generate security-relevant
portions of the system hardware, software, and firmware from unauthorized modification or
destruction. Maintaining the integrity of changes to the system, system component, or system
service requires strict configuration control throughout the system development life cycle to
track authorized changes and prevent unauthorized changes.
The configuration items that are placed under configuration management include the formal
model; the functional, high-level, and low-level design specifications; other design data;
implementation documentation; source code and hardware schematics; the current running
version of the object code; tools for comparing new versions of security-relevant hardware
descriptions and source code with previous versions; and test fixtures and documentation.
Depending on the mission and business needs of organizations and the nature of the contractual
relationships in place, developers may provide configuration management support during the
operations and maintenance stage of the system development life cycle.
DEVELOPER CONFIGURATION MANAGEMENT | SOFTWARE AND FIRMWARE INTEGRITY VERIFICATION
Require the developer of the system, system component, or system service to enable
integrity verification of software and firmware components.
Discussion: Software and firmware integrity verification allows organizations to detect
unauthorized changes to software and firmware components using developer-provided
tools, techniques, and mechanisms. The integrity checking mechanisms can also address
counterfeiting of software and firmware components. Organizations verify the integrity of
software and firmware components, for example, through secure one-way hashes provided
by developers. Delivered software and firmware components also include any updates to
such components
DEVELOPER CONFIGURATION MANAGEMENT | ALTERNATIVE CONFIGURATION MANAGEMENT
PROCESSES
Provide an alternate configuration management process using organizational personnel in
the absence of a dedicated developer configuration management team.
Discussion: Alternate configuration management processes may be required when
organizations use commercial off-the-shelf information technology products. Alternate
configuration management processes include organizational personnel who review and
approve proposed changes to systems, system components, and system services and
conduct security and privacy impact analyses prior to the implementation of changes to
systems, components, or services.
DEVELOPER CONFIGURATION MANAGEMENT | HARDWARE INTEGRITY VERIFICATION
Require the developer of the system, system component, or system service to enable
integrity verification of hardware components.
Discussion: Hardware integrity verification allows organizations to detect unauthorized
changes to hardware components using developer-provided tools, techniques, methods, and
mechanisms. Organizations may verify the integrity of hardware components with hard-tocopy labels, verifiable serial numbers provided by developers, and by requiring the use of
anti-tamper technologies. Delivered hardware components also include hardware and
firmware updates to such components.
DEVELOPER CONFIGURATION MANAGEMENT | TRUSTED GENERATION
Require the developer of the system, system component, or system service to employ
tools for comparing newly generated versions of security-relevant hardware descriptions,
source code, and object code with previous versions.
Discussion: The trusted generation of descriptions, source code, and object code addresses
authorized changes to hardware, software, and firmware components between versions
during development. The focus is on the efficacy of the configuration management process
by the developer to ensure that newly generated versions of security-relevant hardware
descriptions, source code, and object code continue to enforce the security policy for the
system, system component, or system service. In contrast, SA-10(1) and SA-10(3) allow
organizations to detect unauthorized changes to hardware, software, and firmware
components using tools, techniques, or mechanisms provided by developers
DEVELOPER CONFIGURATION MANAGEMENT | MAPPING INTEGRITY FOR VERSION CONTROL
Require the developer of the system, system component, or system service to maintain
the integrity of the mapping between the master build data describing the current version
of security-relevant hardware, software, and firmware and the on-site master copy of the
data for the current version.
Discussion: Mapping integrity for version control addresses changes to hardware, software,
and firmware components during both initial development and system development life
cycle updates. Maintaining the integrity between the master copies of security-relevant
hardware, software, and firmware (including designs, hardware drawings, source code) and
the equivalent data in master copies in operational environments is essential to ensuring the
availability of organizational systems that support critical mission and business functions.
DEVELOPER CONFIGURATION MANAGEMENT | TRUSTED DISTRIBUTION
Require the developer of the system, system component, or system service to execute
procedures for ensuring that security-relevant hardware, software, and firmware updates
distributed to the organization are exactly as specified by the master copies.
Discussion: The trusted distribution of security-relevant hardware, software, and firmware
updates help to ensure that the updates are correct representations of the master copies
maintained by the developer and have not been tampered with during distribution.
DEVELOPER CONFIGURATION MANAGEMENT | SECURITY AND PRIVACY REPRESENTATIVES
Require [Assignment: organization-defined security and privacy representatives] to be
included in the [Assignment: organization-defined configuration change management and
control process].
Discussion: Information security and privacy representatives can include system security
officers, senior agency information security officers, senior agency officials for privacy, and
system privacy officers. Representation by personnel with information security and privacy
expertise is important because changes to system configurations can have unintended side
effects, some of which may be security- or privacy-relevant. Detecting such changes early in
the process can help avoid unintended, negative consequences that could ultimately affect
the security and privacy posture of systems. The configuration change management and
control process in this control enhancement refers to the change management and control
process defined by organizations in SA-10b.